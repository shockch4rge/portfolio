---
import type { InferEntrySchema } from "astro:content";
import { getEntries } from "astro:content";

import Glow from "@assets/project_card_glow.svg";

interface Props {
	project: InferEntrySchema<"projects"> & { id: string };
	index: number;
}

const { project, index } = Astro.props;
const tags = await getEntries(project.tags ?? []);
---

<li
	class="group min-h-64 col-span-1 bg-gray-600/10 text-gray-600 hover:text-white ring-2 ring-gray-400/25 hover:ring-primary ring-offset-4 ring-offset-gray-950/80 rounded-sm transition"
>
	<a class="h-full w-full p-6 block relative" href={`/projects/${project.id}`}>
		<Glow
			class="absolute -left-20 lg:left-0 -bottom-20 lg:bottom-0 scale-50 lg:scale-100 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none"
		/>
		<article class="flex flex-col space-y-4 justify-start text-start">
			<h2 class="m-0 text-xl font-extrabold">{project.name}</h2>
			<div class="flex items-center space-x-2">
				{
					tags.map(
						({ data: { id, iconUrl } }) =>
							iconUrl && (
								<img
									src={iconUrl}
									alt={`${id} logo`}
									height={20}
									width={20}
									class="select-none"
								/>
							)
					)
				}
			</div>
			<p class="text-base tracking-wide">{project.description}</p>
			<div class="group m-0 flex items-center space-x-1 justify-self-end font-body">
				<span class="text-sm tracking-wide">Read More</span>
				<i
					class="ph ph-arrow-right group-hover:translate-x-1 opacity-0 group-hover:opacity-100 transition-transform"
				></i>
			</div>
		</article>
	</a>
</li>

<style define:vars={{ animationOrder: index }}>
	li {
		animation-name: animateIn;
		animation-duration: 1.4s;
		animation-delay: calc(var(--animationOrder) * 100ms);
		animation-fill-mode: both;
		animation-timing-function: var(--cube-in);
	}

	@keyframes animateIn {
		0% {
			opacity: 0;
			transform: translateY(16px);
		}

		100% {
			opacity: 1;
		}
	}
</style>
